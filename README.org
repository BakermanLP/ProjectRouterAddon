#+title: Project Router Addon
#+author: Michael Bäcker
#+date: 2025-05-07
#+description: Wie bringen wir einen Mehrwert in unser Heimnetzwerk
#+categories[]: technik
#+tags[]: linux

* Links aus dem Video
+ https://www.raspberrypi.com/software/
+ https://quad9.net/de/
+ https://github.com/pi-hole/docker-pi-hole/

{{< youtube _DBCLYuQs7E >}}

* Raspberry Pi Installation

Mit dem Tool Raspberry Pi Imager erzeugt ihr euch einen USB Stick oder eine Memory Card für den Raspberry Pi.
Bei der OS Auswahl empfehle ich im Moment (Mai 2025) Ubuntu Server 24.04 LTS 64 Bit

Das Bootet ihr dann und könnt euch danach mit dem Benutzernamen ubuntu und dem Passwort ubuntu per SSH auf der Maschine anmelden

* Konfigurationen
** Hostnamen setzen
#+begin_src bash
sudo vi /etc/hostname
#+end_src

Nun folgende Tastenkombinationen
#+begin_src vim
D (Zum löschen des Inhalts der Zeile
i (Zum aktivieren des Insert Modus)
pi-one (Euer Hostnamen)
ESC (zum beenden des Insert Modus)
:wq
#+end_src

Damit ist der Hostnane gesetzt

** System aktualisieren

#+begin_src bash
sudo apt update
sudo apt upgrade
#+end_src

** Snap entfernen
#+begin_src bash
  sudo -i
  apt remove snapd
  rm -r /snap /var/snap /var/lib/snapd
  # Eventuell nach einem Reboot nochmal ausführen
#+end_src

** Docker installieren

#+begin_src bash
  apt install docker.io docker-compose-v2
  usermod -a -G docker ubuntu
  exit
#+end_src

** Netzwerkkonfiguration

Bitte an der folgenden Datei noch eventuell notwendige Änderungen vornehmen.

#+begin_src bash
sudo vi /etc/netplan/50-cloud-init.yaml
#+end_src

/etc/netplan/50-cloud-init.yaml
#+begin_src yaml 
network:
    ethernets:
        eth0:
            addresses:
            - 192.168.1.51/24
            dhcp4: false
            gateway4: 192.168.1.1
            nameservers:
                addresses:
                - 9.9.9.9
                - 1.1.1.1
            optional: true
    version: 2
#+end_src

** Netzwerk Konfiguration kontrollieren

#+begin_src bash
  ip addr ls dev eth0

  networkctl status eth0
#+end_src

** Lokalen Resolver deaktivieren  

#+begin_src bash
sudo vi /etc/systemd/resolved.conf
#+end_src
#+begin_src ini 
[Resolve]
DNSStubListener=no
#+end_src
#+begin_src bash
sudo systemctl restart systemd-resolved.service
#+end_src

** Testen des Benutzers
#+begin_src bash
id
#+end_src
Hier müsste in der Auflistung der Gruppen auch die Gruppe docker auftauchen. Wenn ja, dann sollte auch der nächste Befehl funktionieren

#+begin_src bash
docker ps
#+end_src

** Installation Pi-Hole als Docker Container
Als Benutzer ubuntu bitte folgendes ausführen
#+begin_src bash
  cd
  mkdir docker docker/pi-hole
  cd docker/pi-hole
  mkdir etc-dnsmasq.d etc-pihole 

  vi docker-compose.yaml
#+end_src

#+begin_src yaml
# More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
services:
  pihole:
    deploy:
      replicas: 1
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      # DNS Ports
      - "53:53/tcp"
      - "53:53/udp"
      # Default HTTP Port
      - "80:80/tcp"
      # Default HTTPs Port. FTL will generate a self-signed certificate
      - "443:443/tcp"
      # Uncomment the below if using Pi-hole as your DHCP Server
      #- "67:67/udp"
    environment:
      # Set the appropriate timezone for your location (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g:
      TZ: 'Europe/Berlin'
      # Set a password to access the web interface. Not setting one will result in a random password being assigned
      FTLCONF_webserver_api_password: 'correct horse battery staple'
    # Volumes store your data between container upgrades
    volumes:
      # For persisting Pi-hole's databases and common configuration file
      - './etc-pihole:/etc/pihole'
      # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6. If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration. It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      # Required if you are using Pi-hole as your DHCP server, else not needed
      - NET_ADMIN
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      - SYS_TIME
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
    restart: unless-stopped
#+end_src

#+begin_src bash
  docker compose pull
  docker compose up

  # Container mit STRG+c stoppen
  # Dauerhaft dann starten im Hintergrund mit
  docker compose up -d
  # Zum Stoppen nehmt ihr dann
  docker compose down
#+end_src

** Pi-Hole
In Pi-Hole müssen wir noch etwas konfigurieren, damit wir auch DNS Abfragen stellen können

Aufruf der Oberfläche von Pi-Hole geht über:
http://192.168.1.51/admin/
Sofern ihr keine andere IP Adresse verwendet.

An der Konsole / Terminal sehen wir, dass im Moment folgender Befehl nicht funktioniert.
#+begin_src bash
nslookup www.youtube.com - 192.168.1.51
#+end_src

In der Weboberfläche müssen wir unter
+ Settings
  + DNS
    + Upstream DNS Server
      + IPv4 Quad9 unfilterd in der ersten Spalte
      + Cloudflare in der zweiten Spalte 
    + Interface settings
      + Permit all origins setzen
    + Rate limiting
      + 0 queries within 0 seconds setzen

Und nun funktioniert das hier auch.        
#+begin_src bash
nslookup www.youtube.com - 192.168.1.51
#+end_src

* Fritzbox DNS ändern
+ Heimnetz
  + Netzwerk
    + Netzwerkeinstellungen
      + IPv4-Einstellungen
        Lokaler DNS Server: 192.168.1.51 (oder welche IP Addresse ihr hier eingestellt habt)
